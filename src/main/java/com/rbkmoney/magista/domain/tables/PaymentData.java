/*
 * This file is generated by jOOQ.
*/
package com.rbkmoney.magista.domain.tables;


import com.rbkmoney.magista.domain.Keys;
import com.rbkmoney.magista.domain.Mst;
import com.rbkmoney.magista.domain.enums.BankCardTokenProvider;
import com.rbkmoney.magista.domain.enums.OnHoldExpiration;
import com.rbkmoney.magista.domain.enums.PaymentFlow;
import com.rbkmoney.magista.domain.enums.PaymentTool;
import com.rbkmoney.magista.domain.tables.records.PaymentDataRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentData extends TableImpl<PaymentDataRecord> {

    private static final long serialVersionUID = 1056366056;

    /**
     * The reference instance of <code>mst.payment_data</code>
     */
    public static final PaymentData PAYMENT_DATA = new PaymentData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentDataRecord> getRecordType() {
        return PaymentDataRecord.class;
    }

    /**
     * The column <code>mst.payment_data.id</code>.
     */
    public final TableField<PaymentDataRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mst.payment_data_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mst.payment_data.invoice_id</code>.
     */
    public final TableField<PaymentDataRecord, String> INVOICE_ID = createField("invoice_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.payment_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.party_id</code>.
     */
    public final TableField<PaymentDataRecord, UUID> PARTY_ID = createField("party_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.party_shop_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PARTY_SHOP_ID = createField("party_shop_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.party_contract_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PARTY_CONTRACT_ID = createField("party_contract_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.payment_currency_code</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_CURRENCY_CODE = createField("payment_currency_code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.payment_amount</code>.
     */
    public final TableField<PaymentDataRecord, Long> PAYMENT_AMOUNT = createField("payment_amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.payment_customer_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_CUSTOMER_ID = createField("payment_customer_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_tool</code>.
     */
    public final TableField<PaymentDataRecord, PaymentTool> PAYMENT_TOOL = createField("payment_tool", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.magista.domain.enums.PaymentTool.class), this, "");

    /**
     * The column <code>mst.payment_data.payment_bank_card_masked_pan</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_BANK_CARD_MASKED_PAN = createField("payment_bank_card_masked_pan", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_bank_card_bin</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_BANK_CARD_BIN = createField("payment_bank_card_bin", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_bank_card_token</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_BANK_CARD_TOKEN = createField("payment_bank_card_token", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_bank_card_system</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_BANK_CARD_SYSTEM = createField("payment_bank_card_system", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_bank_card_token_provider</code>.
     */
    public final TableField<PaymentDataRecord, BankCardTokenProvider> PAYMENT_BANK_CARD_TOKEN_PROVIDER = createField("payment_bank_card_token_provider", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.magista.domain.enums.BankCardTokenProvider.class), this, "");

    /**
     * The column <code>mst.payment_data.payment_terminal_provider</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_TERMINAL_PROVIDER = createField("payment_terminal_provider", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_digital_wallet_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_DIGITAL_WALLET_ID = createField("payment_digital_wallet_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_digital_wallet_provider</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_DIGITAL_WALLET_PROVIDER = createField("payment_digital_wallet_provider", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_flow</code>.
     */
    public final TableField<PaymentDataRecord, PaymentFlow> PAYMENT_FLOW = createField("payment_flow", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.magista.domain.enums.PaymentFlow.class), this, "");

    /**
     * The column <code>mst.payment_data.payment_hold_on_expiration</code>.
     */
    public final TableField<PaymentDataRecord, OnHoldExpiration> PAYMENT_HOLD_ON_EXPIRATION = createField("payment_hold_on_expiration", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.rbkmoney.magista.domain.enums.OnHoldExpiration.class), this, "");

    /**
     * The column <code>mst.payment_data.payment_hold_until</code>.
     */
    public final TableField<PaymentDataRecord, LocalDateTime> PAYMENT_HOLD_UNTIL = createField("payment_hold_until", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>mst.payment_data.payment_session_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_SESSION_ID = createField("payment_session_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_fingerprint</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_FINGERPRINT = createField("payment_fingerprint", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_ip</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_IP = createField("payment_ip", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_phone_number</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_PHONE_NUMBER = createField("payment_phone_number", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_email</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_EMAIL = createField("payment_email", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_created_at</code>.
     */
    public final TableField<PaymentDataRecord, LocalDateTime> PAYMENT_CREATED_AT = createField("payment_created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>mst.payment_data.payment_party_revision</code>.
     */
    public final TableField<PaymentDataRecord, Long> PAYMENT_PARTY_REVISION = createField("payment_party_revision", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>mst.payment_data.payment_context_type</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_CONTEXT_TYPE = createField("payment_context_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_context</code>.
     */
    public final TableField<PaymentDataRecord, byte[]> PAYMENT_CONTEXT = createField("payment_context", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>mst.payment_data.payment_make_recurrent_flag</code>.
     */
    public final TableField<PaymentDataRecord, Boolean> PAYMENT_MAKE_RECURRENT_FLAG = createField("payment_make_recurrent_flag", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>mst.payment_data.payment_recurrent_payer_parent_invoice_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_RECURRENT_PAYER_PARENT_INVOICE_ID = createField("payment_recurrent_payer_parent_invoice_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>mst.payment_data.payment_recurrent_payer_parent_payment_id</code>.
     */
    public final TableField<PaymentDataRecord, String> PAYMENT_RECURRENT_PAYER_PARENT_PAYMENT_ID = createField("payment_recurrent_payer_parent_payment_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>mst.payment_data</code> table reference
     */
    public PaymentData() {
        this("payment_data", null);
    }

    /**
     * Create an aliased <code>mst.payment_data</code> table reference
     */
    public PaymentData(String alias) {
        this(alias, PAYMENT_DATA);
    }

    private PaymentData(String alias, Table<PaymentDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentData(String alias, Table<PaymentDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mst.MST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PaymentDataRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAYMENT_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentDataRecord> getPrimaryKey() {
        return Keys.PAYMENT_DATA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentDataRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentDataRecord>>asList(Keys.PAYMENT_DATA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PaymentDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentDataRecord, ?>>asList(Keys.PAYMENT_DATA__PAYMENT_DATA_INVOICE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PaymentData as(String alias) {
        return new PaymentData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentData rename(String name) {
        return new PaymentData(name, null);
    }
}
